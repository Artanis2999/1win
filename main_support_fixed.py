import logging
import json
from pathlib import Path
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.types import FSInputFile, WebAppInfo
from dotenv import load_dotenv
import os
import asyncio
from check_reg import check_user_registered
from check_dep import check_user_deposited


# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
with open(Path(__file__).parent / 'translations.json', 'r', encoding='utf-8') as f:
    TRANSLATIONS = json.load(f)

REG_CHANNEL_ID = -1002777437965

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CHANNEL_ID = -1001988478879
CHANNEL_LINK = "https://t.me/+QBQhn_Xqvio1Zjcy"
P_LINK = "https://1wcjlr.com/casino/list?open=register&p=kd4s&sub1="
IMAGE_PATH = Path(__file__).parent / "assets/main_menu.jpg"
BOT_DESCRIPTION = "Aviamasters - your aviation helper ‚úàÔ∏è"
USERS_FILE = Path(__file__).parent / 'users.json'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–æ–≤
LANGUAGES = {
    "ru": {"name": "–†—É—Å—Å–∫–∏–π", "flag": "üá∑üá∫"},
    "en": {"name": "English", "flag": "üá¨üáß"},
    "hi": {"name": "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä", "flag": "üáÆüá≥"},
    "id": {"name": "Bahasa", "flag": "üáÆüá©"},
    "pt": {"name": "Portugu√™s", "flag": "üáßüá∑"},
    "vi": {"name": "Ti·∫øng Vi·ªát", "flag": "üáªüá≥"},
    "uk": {"name": "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "flag": "üá∫üá¶"},
    "fr": {"name": "Fran√ßais", "flag": "üá´üá∑"}
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

from aiogram.types import WebAppInfo

async def show_main_menu(chat_id: int, lang: str = "en", message_id: int = None):
    translations = TRANSLATIONS.get(lang, TRANSLATIONS["en"])

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –∏–∑ users.json
        is_admin = False
        with open(USERS_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            for u in data.get("users", []):
                if u["id"] == chat_id:
                    is_admin = u.get("admin", False)
                    break

        web_url = "https://avia1win.netlify.app/frontend/admin" if is_admin else "https://avia1win.netlify.app/frontend"
        photo = FSInputFile(IMAGE_PATH)
        builder = ReplyKeyboardBuilder()

        builder.row(
            types.KeyboardButton(text=translations.get("reg", "üìù Registration")),
            types.KeyboardButton(text=translations.get("instr", "üìö Instructions"))
        )
        builder.row(types.KeyboardButton(text=translations.get("support", "üõ† Support")))
        builder.row(types.KeyboardButton(
            text="üöÄ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª",
            web_app=WebAppInfo(url=web_url)
        ))

        if message_id:
            await bot.delete_message(chat_id=chat_id, message_id=message_id)

        sent_message = await bot.send_photo(
            chat_id=chat_id,
            photo=photo,
            caption=f"<b>{translations.get('menu', 'Main Menu')}</b>",
            parse_mode="HTML",
            reply_markup=builder.as_markup(
                resize_keyboard=True,
                one_time_keyboard=False
            )
        )
        return sent_message.message_id
    except Exception as e:
        logging.error(f"Error showing menu: {e}")

        builder = ReplyKeyboardBuilder()
        builder.row(
            types.KeyboardButton(text=translations.get("reg", "üìù Registration")),
            types.KeyboardButton(text=translations.get("instr", "üìö Instructions"))
        )
        builder.row(types.KeyboardButton(text=translations.get("support", "üõ† Support")))
        builder.row(types.KeyboardButton(
            text="üöÄ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª",
            web_app=WebAppInfo(url="https://avia1win.netlify.app/frontend")
        ))

        if message_id:
            await bot.delete_message(chat_id=chat_id, message_id=message_id)

        sent_message = await bot.send_message(
            chat_id=chat_id,
            text=f"<b>{translations.get('menu', 'Main Menu')}</b>",
            parse_mode="HTML",
            reply_markup=builder.as_markup(
                resize_keyboard=True,
                one_time_keyboard=False
            )
        )
        return sent_message.message_id
    except Exception as e:
        logging.error(f"Error showing menu: {e}")
        builder = ReplyKeyboardBuilder()
        builder.row(
            types.KeyboardButton(text=translations.get("reg", "üìù Registration")),
            types.KeyboardButton(text=translations.get("instr", "üìö Instructions"))
        )
        builder.row(types.KeyboardButton(text=translations.get("support", "üõ† Support")))
        builder.row(types.KeyboardButton(
            text="üöÄ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª",
            web_app=WebAppInfo(url="https://avia1win.netlify.app")  # ‚Üê —Å—é–¥–∞ —Ç–æ–∂–µ
        ))

        if message_id:
            
            await bot.delete_message(chat_id=chat_id, message_id=message_id)

        sent_message = await bot.send_message(
            chat_id=chat_id,
            text=f"<b>{translations.get('menu', 'Main Menu')}</b>",
            parse_mode="HTML",
            reply_markup=builder.as_markup(
                resize_keyboard=True,
                one_time_keyboard=False
            )
        )
        return sent_message.message_id


async def show_registration(chat_id: int, lang: str = "en", message_id: int = None, user_id: int = None):
    translations = TRANSLATIONS.get(lang, TRANSLATIONS["en"])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    personalized_link = f"{P_LINK}{user_id}"
    # –ó–∞–º–µ–Ω—è–µ–º PERSONAL_LINK –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É
    registration_message = translations.get("registration_message", "Registration message").replace("PERSONAL_LINK", personalized_link)
    
    try:
        photo = FSInputFile(IMAGE_PATH)
        builder = ReplyKeyboardBuilder()
        
        builder.row(types.KeyboardButton(text=translations.get("next", "‚û°Ô∏è Next")))
        builder.row(types.KeyboardButton(text=translations.get("back", "‚¨ÖÔ∏è Back")))
        
        if message_id:
              # –ó–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã
            await bot.delete_message(chat_id=chat_id, message_id=message_id)
            
        sent_message = await bot.send_photo(
            chat_id=chat_id,
            photo=photo,
            caption=registration_message,
            parse_mode="HTML",
            reply_markup=builder.as_markup(
                resize_keyboard=True,
                one_time_keyboard=False
            )
        )
        return sent_message.message_id
    except Exception as e:
        logging.error(f"Error showing registration: {e}")
        builder = ReplyKeyboardBuilder()
        builder.row(types.KeyboardButton(text=translations.get("next", "‚û°Ô∏è Next")))
        builder.row(types.KeyboardButton(text=translations.get("back", "‚¨ÖÔ∏è Back")))
        
        if message_id:
              # –ó–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã
            await bot.delete_message(chat_id=chat_id, message_id=message_id)
            
        sent_message = await bot.send_message(
            chat_id=chat_id,
            text=registration_message,
            parse_mode="HTML",
            reply_markup=builder.as_markup(
                resize_keyboard=True,
                one_time_keyboard=False
            )
        )
        return sent_message.message_id


@dp.message(lambda m: m.text in [TRANSLATIONS[lang]["next"] for lang in LANGUAGES])
async def process_next(message: types.Message):
    user = message.from_user
    user_id = user.id
    lang = user_data.get(user_id, {}).get("lang", "en")
    translations = TRANSLATIONS[lang]
    stage = user_data.get(user_id, {}).get("last_stage")

    try:
        if stage == "registration":
            if await check_user_registered(user_id):
                # –û–±–Ω–æ–≤–ª—è–µ–º stage –≤ users.json
                with open(USERS_FILE, 'r+', encoding='utf-8') as f:
                    data = json.load(f)
                    for u in data["users"]:
                        if u["id"] == user_id:
                            u["stage"] = "deposit"
                            break
                    f.seek(0)
                    json.dump(data, f, ensure_ascii=False, indent=4)
                    f.truncate()

                user_data[user_id]["last_stage"] = "deposit"
                builder = ReplyKeyboardBuilder()
                builder.row(
                    types.KeyboardButton(text=translations["next"]),
                    types.KeyboardButton(text=translations["back"])
                )
                await message.answer(translations["dep"], reply_markup=builder.as_markup(resize_keyboard=True))
            else:
                await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
        elif stage == "deposit":
            if await check_user_deposited(user_id):
                await message.answer("‚úÖ –î–µ–ø–æ–∑–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
                user_data[user_id]["last_message_id"] = await show_main_menu(user_id, lang)

            else:
                await message.answer("‚ùå –ú—ã –Ω–µ –Ω–∞—à–ª–∏ –¥–µ–ø–æ–∑–∏—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            await message.answer("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç—Ç–∞–ø. –ù–∞—á–Ω–∏—Ç–µ —Å /start.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç—Ç–∞–ø–∞ {stage}: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    user = message.from_user
    lang = user_data.get(user.id, {}).get("lang", "en")
    translations = TRANSLATIONS[lang]


def register_user_if_new(user: types.User):
    USERS_FILE = Path(__file__).parent / 'users.json'
    try:
        with open(USERS_FILE, 'r+', encoding='utf-8') as f:
            data = json.load(f)
            user_ids = [u["id"] for u in data.get("users", [])]
            if user.id not in user_ids:
                new_user = {
                    "id": user.id,
                    "name": user.full_name,
                    "username": user.username or "",
                    "reg": False,
                    "dep": False,
                    "admin": False,
                    "amount": 0
                }
                data["users"].append(new_user)
                f.seek(0)
                json.dump(data, f, ensure_ascii=False, indent=4)
                f.truncate()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")



@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    register_user_if_new(message.from_user)
    builder = InlineKeyboardBuilder()
    
    for i in range(0, len(LANGUAGES), 2):
        languages = list(LANGUAGES.items())
        row = languages[i:i+2]
        
        for code, info in row:
            builder.button(
                text=f"{info['flag']} {info['name']}", 
                callback_data=f"lang_{code}"
            )
        
        builder.adjust(2)
    
    await message.answer(
        TRANSLATIONS["en"]["welcome"],
        reply_markup=builder.as_markup()
    )

@dp.callback_query(lambda c: c.data.startswith("lang_"))
async def process_language(callback: types.CallbackQuery):
    lang = callback.data.split("_")[1]
    user_data[callback.from_user.id] = {"lang": lang}
    
    await callback.message.delete()
    
    translations = TRANSLATIONS.get(lang, TRANSLATIONS["en"])
    
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text=translations["subscribe_btn"],
            url=CHANNEL_LINK
        )
    )
    builder.row(
        types.InlineKeyboardButton(
            text=translations["check"],
            callback_data="check_subscription"
        )
    )
    
    await callback.message.answer(
        translations["subscribe"],
        reply_markup=builder.as_markup()
    )

@dp.callback_query(lambda c: c.data == "check_subscription")
async def check_subscription(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    lang = user_data.get(user_id, {}).get("lang", "en")
    translations = TRANSLATIONS.get(lang, TRANSLATIONS["en"])
    
    try:
        chat_member = await bot.get_chat_member(CHANNEL_ID, user_id)
        if chat_member.status in ["member", "administrator", "creator"]:
            await callback.message.delete()
            
            temp_msg = await callback.message.answer(translations["access_granted"])
            
            await temp_msg.delete()
            
            user_data[user_id]["last_message_id"] = await show_main_menu(user_id, lang)
        else:
            await callback.answer(translations["not_subscribed"], show_alert=True)
    except Exception as e:
        logging.error(f"Subscription error: {e}")
        await callback.answer(translations["check_error"], show_alert=True)


@dp.message(lambda message: message.text in [TRANSLATIONS[lang]["reg"] for lang in LANGUAGES])
async def process_registration_button(message: types.Message):
    user_id = message.from_user.id
    lang = user_data.get(user_id, {}).get("lang", "en")
    last_message_id = user_data.get(user_id, {}).get("last_message_id")
    if last_message_id:
        try:
            await bot.delete_message(chat_id=user_id, message_id=last_message_id)
        except Exception as e:
            logging.error(f"Error deleting main menu message: {e}")
    await bot.delete_message(chat_id=user_id, message_id=message.message_id)
    user_data[user_id]["last_message_id"] = await show_registration(user_id, lang, user_id=user_id)
    user_data[user_id]["last_stage"] = "registration"

@dp.message(lambda message: message.text in [TRANSLATIONS[lang]["algo"] for lang in LANGUAGES])
async def process_algo_button(message: types.Message):
    user_id = message.from_user.id
    lang = user_data.get(user_id, {}).get("lang", "en")
    last_message_id = user_data.get(user_id, {}).get("last_message_id")
    if last_message_id:
        try:
            await bot.delete_message(chat_id=user_id, message_id=last_message_id)
        except Exception as e:
            logging.error(f"Error deleting main menu message: {e}")
    await bot.delete_message(chat_id=user_id, message_id=message.message_id)
    user_data[user_id]["last_message_id"] = await show_main_menu(user_id, lang)

@dp.message(lambda message: message.text in [TRANSLATIONS[lang]["support"] for lang in LANGUAGES])
async def process_support(message: types.Message):
    user_id = message.from_user.id
    lang = user_data.get(user_id, {}).get("lang", "en")
    translations = TRANSLATIONS.get(lang, TRANSLATIONS["en"])

    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text=translations.get("reg", "üìù Registration")),
        types.KeyboardButton(text=translations.get("instr", "üìö Instructions"))
    )
    builder.row(types.KeyboardButton(text=translations.get("support", "üõ† Support")))
    builder.row(types.KeyboardButton(
        text="üöÄ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª",
        web_app=WebAppInfo(url="https://avia1win.netlify.app/frontend")
    ))

    await message.answer(
        translations.get("support_text", "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @maboy_poderzhka"),
        reply_markup=builder.as_markup(resize_keyboard=True)
    )

@dp.message(lambda message: message.text in [TRANSLATIONS[lang]["back"] for lang in LANGUAGES])
async def process_back(message: types.Message):
    user_id = message.from_user.id
    lang = user_data.get(user_id, {}).get("lang", "en")
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
      # –ó–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã
    await bot.delete_message(chat_id=user_id, message_id=message.message_id)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
    last_message_id = user_data.get(user_id, {}).get("last_message_id")
    if last_message_id:
        try:
              # –ó–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã
            await bot.delete_message(chat_id=user_id, message_id=last_message_id)
        except Exception as e:
            logging.error(f"Error deleting registration message: {e}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    user_data[user_id]["last_message_id"] = await show_main_menu(user_id, lang)

async def set_bot_description():
    await bot.set_my_description(BOT_DESCRIPTION)

async def main():
    await set_bot_description()
    await dp.start_polling(bot)

@dp.message(lambda message: message.text in [TRANSLATIONS[lang]["instr"] for lang in LANGUAGES])
async def process_instruction(message: types.Message):
    user_id = message.from_user.id
    lang = user_data.get(user_id, {}).get("lang", "en") 
    translations = TRANSLATIONS.get(lang, TRANSLATIONS["en"])

    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text=translations.get("reg", "üìù Registration")),
        types.KeyboardButton(text=translations.get("instr", "üìö Instructions"))
    )
    builder.row(types.KeyboardButton(text=translations.get("support", "üõ† Support")))
    builder.row(types.KeyboardButton(
        text="üöÄ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª",
        web_app=WebAppInfo(url="https://avia1win.netlify.app/frontend")
    ))

    await message.answer(
        translations.get("instructions", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"),
        reply_markup=builder.as_markup(resize_keyboard=True)
    )

if __name__ == "__main__":
    asyncio.run(main())  

